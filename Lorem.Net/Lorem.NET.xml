<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lorem.NET</name>
    </assembly>
    <members>
        <member name="T:LoremNET.Extensions">
            <summary>
            Class containing extension methods to support string manipulation.
            </summary>
        </member>
        <member name="M:LoremNET.Extensions.Remove(System.String,System.String)">
            <summary>
            Removes the specified pattern.
            </summary>
            <param name="s">The string to remove <paramref name="pattern"/> from.</param>
            <param name="pattern">The pattern to remove.</param>
            <returns>A new string with all instances of <paramref name="pattern" /> removed</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> and <paramref name="pattern"/> must not be null</exception>
        </member>
        <member name="M:LoremNET.Extensions.Split(System.String,System.String)">
            <summary>
            Splits the string using the specified separator.
            </summary>
            <param name="s">The string to split.</param>
            <param name="separator">The separator.</param>
            <returns><paramref name="s" /> split into an array of strings</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> and <paramref name="separator"/> must not be null</exception>
        </member>
        <member name="M:LoremNET.Extensions.UppercaseFirst(System.String)">
            <summary>
            Capitalises the first letter.
            </summary>
            <param name="s">The string to capitalise.</param>
            <returns>A new string with the first character capitalised.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> must not be null</exception>
        </member>
        <member name="T:LoremNET.Lorem">
            <summary>
            Class to generate random values of various types.
            </summary>
        </member>
        <member name="M:LoremNET.Lorem.Chance(System.Int32,System.Int32)">
            <summary>
            Returns true <paramref name="successes"/> times out of <paramref name="attempts"/>.
            </summary>
            <param name="successes">The number of successes per <paramref name="attempts"/>.</param>
            <param name="attempts">The attempts.</param>
            <returns><c>true</c> on success, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="successes"/> must be greater than or equal to 0 and <paramref name="attempts"/> must be greater than 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="successes"/> is greater than <paramref name="attempts"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.DateTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a random DateTime between the given date and now.
            </summary>
            <param name="startYear">The minimum year.</param>
            <param name="startMonth">The minimum month.</param>
            <param name="startDay">The minimum day.</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:LoremNET.Lorem.DateTime(System.DateTime)">
            <summary>
            Creates a random DateTime between the given date and now.
            </summary>
            <param name="min">The minimum date.</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:LoremNET.Lorem.DateTime(System.DateTime,System.DateTime)">
            <summary>
            Creates a random DateTime between the given minimum and maximum dates.
            </summary>
            <param name="min">The minimum date.</param>
            <param name="max">The maximum date.</param>
            <returns>A DateTime</returns>
            <remarks>From http://stackoverflow.com/a/1483677/234132 </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="max"/> must be greater than or equal to <paramref name="min"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Email">
            <summary>
            Creates a random email address of the type random1@random2.com
            </summary>
            <returns>A random email address</returns>
        </member>
        <member name="M:LoremNET.Lorem.Enum``1">
            <summary>
            Creates a random item from the given enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>A random <typeparamref name="TEnum"/></returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> must be an enum.</exception>
        </member>
        <member name="M:LoremNET.Lorem.HexNumber(System.Int32)">
            <summary>
            Creates a random hexidecimal number in string format
            </summary>
            <param name="digits">The number of digits required.</param>
            <returns>A string created using the 'X' format string</returns>
            <remarks>From http://stackoverflow.com/a/1054087/234132 </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="digits"/> must be greater than 0</exception>
        </member>
        <member name="M:LoremNET.Lorem.Integer(System.Int32,System.Int32)">
            <summary>
            Creates a random integer.
            </summary>
            <param name="min">The minimum integer.</param>
            <param name="max">The maximum integer.</param>
            <returns>A random number between min and max.</returns>
            <remarks>
            This is just a wrapper around RandomHelper.Instance.Next to make it slightly more intuitive.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="max"/> must be greater than or equal to <paramref name="min"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Letter">
            <summary>
            Creates a random lowercase letter.
            </summary>
            <returns>A random character between 'a' and 'z' (inclusive)</returns>
        </member>
        <member name="M:LoremNET.Lorem.Number(System.Int64,System.Int64)">
            <summary>
            Creates a random number between min and max
            </summary>
            <param name="min">The minimum number.</param>
            <param name="max">The maximum number.</param>
            <returns>A long integer</returns>
            <remarks>From http://stackoverflow.com/a/6651661/234132 </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="max"/> must be greater than or equal to <paramref name="min"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraph(System.Int32,System.Int32)">
            <summary>
            Creates a random paragraph with <paramref name="sentenceCount"/> sentences and <paramref name="wordCount"/> words per sentence.
            </summary>
            <param name="wordCount">The number of words per sentence.</param>
            <param name="sentenceCount">The number of sentences.</param>
            <returns>A string containing the generated paragraph</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCount"/> and <paramref name="sentenceCount"/> must be greater than 0</exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraph(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a random paragraph with <paramref name="sentenceCount"/> sentences and between <paramref name="wordCountMin" /> and <paramref name="wordCountMax" /> words per sentence.
            </summary>
            <param name="wordCountMin">The minimum number of words per sentence.</param>
            <param name="wordCountMax">The maximum number of words per sentence.</param>
            <param name="sentenceCount">The number of sentences.</param>
            <returns>A string containing the generated paragraph</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCountMin"/>, <paramref name="wordCountMax"/> and <paramref name="sentenceCount"/> must be greater than 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="wordCountMax"/> must be greater than or equal to <paramref name="wordCountMin"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraph(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a random paragraph with between <paramref name="sentenceCountMin" /> and <paramref name="sentenceCountMax" /> sentences and between <paramref name="wordCountMin" /> and <paramref name="wordCountMax" /> words per sentence.
            </summary>
            <param name="wordCountMin">The minimum number of words per sentence.</param>
            <param name="wordCountMax">The maximum number of words per sentence.</param>
            <param name="sentenceCountMin">The minimum number of sentences.</param>
            <param name="sentenceCountMax">The maximum number of sentences.</param>
            <returns>A string containing the generated paragraph</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wordCountMin"/>, <paramref name="wordCountMax"/>, <paramref name="sentenceCountMin"/> and <paramref name="sentenceCountMax"/>
              must all be greater than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="wordCountMax"/> must be greater than or equal to <paramref name="wordCountMin"/>
              and <paramref name="sentenceCountMax"/> must be greater than or equal to <paramref name="sentenceCountMin"/>
            </exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraphs(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <paramref name="paragraphCount"/> paragraphs with <paramref name="sentenceCount"/> sentences and <paramref name="wordCount"/> words per sentence.
            </summary>
            <param name="paragraphCount">The number of paragraphcs</param>
            <param name="wordCount">The number of words per sentence.</param>
            <param name="sentenceCount">The number of sentences.</param>
            <returns>An IEnumerable containing the generated paragraphs</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wordCount"/>, <paramref name="sentenceCount"/> and <paramref name="paragraphCount"/>
              must all be greater than 0.
            </exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraphs(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <paramref name="paragraphCount"/> paragraphs with <paramref name="sentenceCount"/> sentences and between <paramref name="wordCountMin" /> and <paramref name="wordCountMax" /> words per sentence.
            </summary>
            <param name="wordCountMin">The minimum number of words per sentence.</param>
            <param name="wordCountMax">The maximum number of words per sentence.</param>
            <param name="sentenceCount">The number of sentences.</param>
            <param name="paragraphCount">The paragraph count.</param>
            <returns>An IEnumerable containing the generated paragraphs</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wordCountMin"/>, <paramref name="wordCountMax"/>, <paramref name="sentenceCount"/> and <paramref name="paragraphCount"/>
              must all be greater than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="wordCountMax"/> must be greater than or equal to <paramref name="wordCountMin"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraphs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <paramref name="paragraphCount"/> paragraphs with between <paramref name="sentenceCountMin" /> and <paramref name="sentenceCountMax" /> sentences and between <paramref name="wordCountMin" /> and <paramref name="wordCountMax" /> words per sentence.
            </summary>
            <param name="wordCountMin">The minimum number of words per sentence.</param>
            <param name="wordCountMax">The maximum number of words per sentence.</param>
            <param name="sentenceCountMin">The minimum number of sentences.</param>
            <param name="sentenceCountMax">The maximum number of sentences.</param>
            <param name="paragraphCount">The paragraph count.</param>
            <returns>An IEnumerable containing the generated paragraphs</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wordCountMin"/>, <paramref name="wordCountMax"/>, <paramref name="sentenceCountMin"/>, <paramref name="sentenceCountMax"/>
              and <paramref name="paragraphCount"/> must all be greater than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="wordCountMax"/> must be greater than or equal to <paramref name="wordCountMin"/>
              and <paramref name="sentenceCountMax"/> must be greater than or equal to <paramref name="sentenceCountMin"/>
            </exception>
        </member>
        <member name="M:LoremNET.Lorem.Paragraphs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates between <paramref name="paragraphCountMin"/> and <paramref name="paragraphCountMin"/> paragraphs with between <paramref name="sentenceCountMin" /> and <paramref name="sentenceCountMax" /> sentences and between <paramref name="wordCountMin" /> and <paramref name="wordCountMax" /> words per sentence.
            </summary>
            <param name="wordCountMin">The minimum number of words per sentence.</param>
            <param name="wordCountMax">The maximum number of words per sentence.</param>
            <param name="sentenceCountMin">The minimum number of sentences.</param>
            <param name="sentenceCountMax">The maximum number of sentences.</param>
            <param name="paragraphCountMin">The minimum number of paragraphs.</param>
            <param name="paragraphCountMax">The maximum number of paragraphs.</param>
            <returns>An IEnumerable containing the generated paragraphs</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wordCountMin"/>, <paramref name="wordCountMax"/>, <paramref name="sentenceCountMin"/>, <paramref name="sentenceCountMax"/>,
              <paramref name="paragraphCountMin"/> and <paramref name="paragraphCountMax"/> must all be greater than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="wordCountMax"/> must be greater than or equal to <paramref name="wordCountMin"/>,
              <paramref name="sentenceCountMax"/> must be greater than or equal to <paramref name="sentenceCountMin"/>
              and <paramref name="paragraphCountMax"/> must be greater than or equal to <paramref name="paragraphCountMin"/>
            </exception>
        </member>
        <member name="M:LoremNET.Lorem.Random``1(``0[])">
            <summary>
            Picks a random item from the provided array
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="items">The items to pick from.</param>
            <returns>A random element from <paramref name="items"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="items"/> is empty</exception>
        </member>
        <member name="M:LoremNET.Lorem.Sentence(System.Int32)">
            <summary>
            Creates a random sentence with <paramref name="wordCount"/> words.
            </summary>
            <param name="wordCount">The word count for the sentence.</param>
            <returns>A string containing the generated sentence</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCount"/> must be greater than 0</exception>
        </member>
        <member name="M:LoremNET.Lorem.Sentence(System.Int32,System.Int32)">
            <summary>
            Creates a random sentence with between <paramref name="wordCountMin"/> and <paramref name="wordCountMax" /> words.
            </summary>
            <param name="wordCountMin">The minimum word count for the sentence.</param>
            <param name="wordCountMax">The maximum word count for the sentence.</param>
            <returns>A string containing the generated words</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCountMin"/> and <paramref name="wordCountMax"/> must be greater than 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="wordCountMax"/> is less than <paramref name="wordCountMin"/></exception>
        </member>
        <member name="M:LoremNET.Lorem.Words(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a string containing <paramref name="wordCount"/> words.
            </summary>
            <param name="wordCount">The number of words to generate.</param>
            <param name="uppercaseFirstLetter">if set to <c>true</c>, capitalises the first letter.</param>
            <param name="includePunctuation">if set to <c>true</c>, includes punctuation in the string.</param>
            <returns>A string containing the generated words</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCount"/> must be greater than 0</exception>
        </member>
        <member name="M:LoremNET.Lorem.Words(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a string containing between <paramref name="wordCountMin"/> and <paramref name="wordCountMax"/> words.
            </summary>
            <param name="wordCountMin">The minimum number of words.</param>
            <param name="wordCountMax">The maximum number of words.</param>
            <param name="uppercaseFirstLetter">if set to <c>true</c> capitalises the first letter.</param>
            <param name="includePunctuation">if set to <c>true</c> includes punctuation in the string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="wordCountMin"/> and <paramref name="wordCountMax"/> must be greater than 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="wordCountMax"/> is less than <paramref name="wordCountMin"/></exception>
        </member>
        <member name="T:LoremNET.RandomHelper">
            <summary>
            A thread-safe helper class to get an instance of Random.
            </summary>
            <remarks>
            From http://stackoverflow.com/a/1785821/234132
            </remarks>
        </member>
        <member name="F:LoremNET.RandomHelper._seedCounter">
            <summary>
            The seed used for each instance of Random
            </summary>
        </member>
        <member name="P:LoremNET.RandomHelper.Instance">
            <summary>
            Gets thread-local instance of Random.
            </summary>
            <value>
            An instance of Random, lazily implemented.
            </value>
        </member>
        <member name="T:LoremNET.Source">
            <summary>
            Class used to provide random text.
            </summary>
        </member>
        <member name="F:LoremNET.Source.LoremIpsum">
            <summary>
            The source string used to produce reasonable random text.
            </summary>
        </member>
        <member name="M:LoremNET.Source.Rearrange(System.String)">
            <summary>
            Rearranges the specified words.
            </summary>
            <param name="words">The words to re-arrange.</param>
            <returns>An IEnumerable containing <see cref="F:LoremNET.Source.LoremIpsum"/> in a random order.</returns>
        </member>
        <member name="M:LoremNET.Source.WordList(System.Boolean)">
            <summary>
            Creates a random list of words from <see cref="F:LoremNET.Source.LoremIpsum"/>
            </summary>
            <param name="includePuncation">if set to <c>true</c> includes puncation in the words.</param>
            <returns>An IEnumerable containing <see cref="F:LoremNET.Source.LoremIpsum"/> in a random order.</returns>
        </member>
    </members>
</doc>
