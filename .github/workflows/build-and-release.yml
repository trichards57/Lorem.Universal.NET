name: Build and Release

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches-ignore:
      - master
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Extract version from tag
        id: version
        run: |
          $version = "${{ github.ref_name }}".TrimStart("v")
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore

      - name: Build with version injection (creates .nupkg and .snupkg)
        run: |
          dotnet build -c Release --no-restore `
            /p:Version=${{ steps.version.outputs.version }} `
            /p:AssemblyVersion=${{ steps.version.outputs.version }} `
            /p:FileVersion=${{ steps.version.outputs.version }} `
            /p:InformationalVersion=${{ steps.version.outputs.version }}
        shell: pwsh

      - name: Collect artifacts
        run: |
          New-Item -ItemType Directory -Path artifacts
          Get-ChildItem -Recurse -Filter *.nupkg | Copy-Item -Destination artifacts
          Get-ChildItem -Recurse -Filter *.snupkg | Copy-Item -Destination artifacts
        shell: pwsh

      - name: Push packages to NuGet.org
        run: |
          dotnet nuget push "./artifacts/*.nupkg" `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json `
            --skip-duplicate
        shell: pwsh

      - name: Identify .nupkg (non-symbol) file
        id: find_package
        run: |
          $pkg = Get-ChildItem -Path artifacts -Filter *.nupkg | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | Select-Object -First 1
          echo "nupkg_path=$($pkg.FullName)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Determine release type (pre-release or stable)
        id: release_type
        run: |
          if ("${{ github.ref_name }}" -match "-beta") {
            echo "prerelease=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "prerelease=false" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: ${{ steps.find_package.outputs.nupkg_path }}
          prerelease: ${{ steps.release_type.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

